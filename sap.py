#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Adapt√© le 24 Mai 2025 pour inclure le vent et l'impact des pr√©cipitations
@author: alvine
"""

import streamlit as st
import pandas as pd
import numpy as np
import pydeck as pdk
from datetime import datetime

st.set_page_config(layout="wide", page_title="SAP M√©t√©o Cameroun", page_icon="‚õàÔ∏è")

# Donn√©es des r√©gions avec vent
regions_data = {
    "R√©gion": ["Extr√™me-Nord", "Nord", "Adamaoua", "Est", "Centre", 
               "Sud", "Littoral", "Ouest", "Nord-Ouest", "Sud-Ouest"],
    "Latitude": [10.5, 8.5, 7.0, 4.5, 4.75, 
                 3.0, 4.25, 5.5, 6.5, 5.0],
    "Longitude": [14.5, 13.5, 13.5, 14.0, 12.0, 
                  12.0, 9.5, 10.5, 10.0, 9.2],
    "Temp√©rature": [38, 36, 32, 30, 31, 
                    29, 32, 28, 26, 30],
    "Vent": [10, 15, 20, 12, 8, 
             5, 22, 14, 11, 18],
    "Pr√©cipitations": [20, 35, 60, 120, 85, 
                       150, 180, 75, 90, 200],
    "Impacts": [
        "D√©shydratation, acc√®s limit√© √† l'eau",
        "Coup de chaleur, routes poussi√©reuses",
        "Inconfort thermique, d√©gradation de routes",
        "Inondations locales, perturbation du trafic",
        "Crues rapides, bouchons dans les villes",
        "Risque √©lev√© d'inondations urbaines",
        "Inondations majeures, d√©g√¢ts aux b√¢timents",
        "Routes glissantes, risques d‚Äô√©boulements",
        "√âboulements, inaccessibilit√© des villages",
        "Inondations et routes impraticables"
    ]
}

df = pd.DataFrame(regions_data)

SEUILS = {
    "Temp√©rature": {
        "Vert": (15, 24.9, "Conditions normales", "Aucun risque particulier"),
        "Jaune": (25, 29.9, "Inconfort thermique", "Hydratation recommand√©e, prudence"),
        "Orange": (30, 34.9, "Chaleur intense", "Risque de coup de chaleur"),
        "Rouge": (35, 45, "Danger extr√™me", "Activit√©s √† l'ext√©rieur √† √©viter")
    },
    "Vent": {
        "Vert": (5, 19, "Vent faible √† mod√©r√©", "Aucun impact significatif"),
        "Jaune": (20, 40, "Vent fort", "Risque pour les structures l√©g√®res"),
        "Orange": (41, 60, "Rafales dangereuses", "Endommagement d‚Äôinfrastructures possibles"),
        "Rouge": (61, 120, "Vent violent", "Chutes d‚Äôarbres, coupures √©lectriques","Destruction des batiments")
    },
    "Pr√©cipitations": {
        "Vert": (0, 49, "Pluies normales", "Pas d'impact significatif"),
        "Jaune": (50, 75, "Pluies mod√©r√©es", "Risque d‚Äôinondations locales, ralentissements du trafic"),
        "Orange": (76, 100, "Pluies fortes", "Inondations, dommages √† la voirie et logements"),
        "Rouge": (101, 1000, "Pr√©cipitations extr√™mes", "Crues, routes impraticables, d√©placement impossible")
    }
}

def get_alert_level(value, param):
    for level, (min_val, max_val, *_) in SEUILS[param].items():
        if min_val <= value <= max_val:
            return level
    return "Vert"

st.title("üåßÔ∏è Syst√®me d'Alerte Pr√©coce M√©t√©orologique")
st.markdown("Surveillance des conditions m√©t√©orologiques au Cameroun")

with st.sidebar:
    st.header("‚öôÔ∏è Param√®tres")
    selected_region = st.selectbox("S√©lectionner une r√©gion", df["R√©gion"].unique())
    region_idx = df[df["R√©gion"] == selected_region].index[0]
    
    new_temp = st.number_input("Temp√©rature (¬∞C)", value=float(df.at[region_idx, "Temp√©rature"]))
    new_wind = st.number_input("Vent (km/h)", value=float(df.at[region_idx, "Vent"]))
    new_precip = st.number_input("Pr√©cipitations (mm/jour)", value=float(df.at[region_idx, "Pr√©cipitations"]))
    
    if st.button("Mettre √† jour"):
        df.at[region_idx, "Temp√©rature"] = new_temp
        df.at[region_idx, "Vent"] = new_wind
        df.at[region_idx, "Pr√©cipitations"] = new_precip
        st.success("Valeurs mises √† jour")

    st.markdown("---")
    st.markdown("**L√©gende**")
    st.markdown("- üü¢ Vert : Normal\n- üü° Jaune : Attention\n- üü† Orange : Alerte\n- üî¥ Rouge : Danger")

df['Alerte_Temp'] = df['Temp√©rature'].apply(lambda x: get_alert_level(x, "Temp√©rature"))
df['Alerte_Vent'] = df['Vent'].apply(lambda x: get_alert_level(x, "Vent"))
df['Alerte_Precip'] = df['Pr√©cipitations'].apply(lambda x: get_alert_level(x, "Pr√©cipitations"))

tab1, tab2, tab3 = st.tabs(["üìä Tableau de Bord", "üó∫Ô∏è Carte", "üìã Rapport"])

with tab1:
    st.header("Tableau de Bord - R√©gion s√©lectionn√©e")
    region_data = df[df["R√©gion"] == selected_region].iloc[0]
    
    cols = st.columns(3)
    with cols[0]:
        alert = region_data["Alerte_Temp"]
        st.metric("Temp√©rature (¬∞C)", region_data["Temp√©rature"], help=SEUILS["Temp√©rature"][alert][2])
        st.write(SEUILS["Temp√©rature"][alert][3])
    
    with cols[1]:
        alert = region_data["Alerte_Vent"]
        st.metric("Vent (km/h)", region_data["Vent"], help=SEUILS["Vent"][alert][2])
        st.write(SEUILS["Vent"][alert][3])
    
    with cols[2]:
        alert = region_data["Alerte_Precip"]
        st.metric("Pr√©cipitations (mm)", region_data["Pr√©cipitations"], help=SEUILS["Pr√©cipitations"][alert][2])
        st.write(SEUILS["Pr√©cipitations"][alert][3])
    
    st.markdown("---")
    st.subheader("üìå Impacts recens√©s")
    st.write(region_data["Impacts"])

with tab2:
    st.header("Carte des niveaux d'alerte")
    param_carte = st.radio("Param√®tre √† visualiser:", ["Temp√©rature", "Vent", "Pr√©cipitations"], horizontal=True)
    
    color_map = {
        "Vert": [0, 200, 0, 160],
        "Jaune": [255, 255, 0, 160],
        "Orange": [255, 165, 0, 160],
        "Rouge": [255, 0, 0, 160]
    }
    
    if param_carte == "Temp√©rature":
        df["color"] = df["Alerte_Temp"].apply(lambda x: color_map[x])
        value_col = "Temp√©rature"
        alert_col = "Alerte_Temp"
    elif param_carte == "Vent":
        df["color"] = df["Alerte_Vent"].apply(lambda x: color_map[x])
        value_col = "Vent"
        alert_col = "Alerte_Vent"
    else:
        df["color"] = df["Alerte_Precip"].apply(lambda x: color_map[x])
        value_col = "Pr√©cipitations"
        alert_col = "Alerte_Precip"
    
    view_state = pdk.ViewState(latitude=df["Latitude"].mean(), longitude=df["Longitude"].mean(), zoom=5.5)
    layer = pdk.Layer(
        "ScatterplotLayer",
        data=df,
        get_position=["Longitude", "Latitude"],
        get_color="color",
        get_radius=20000,
        pickable=True
    )
    tooltip = {
        "html": f"<b>R√©gion:</b> {{R√©gion}}<br><b>{param_carte}:</b> {{{value_col}}}<br><b>Niveau:</b> {{{alert_col}}}<br><b>Impact:</b> {{Impacts}}",
        "style": {"backgroundColor": "black", "color": "white"}
    }
    st.pydeck_chart(pdk.Deck(layers=[layer], initial_view_state=view_state, tooltip=tooltip))

with tab3:
    st.header("Rapport G√©n√©ral des Alertes")
    alertes = []

    if not df[df["Alerte_Temp"].isin(["Orange", "Rouge"])].empty:
        alertes.append(("üå°Ô∏è Temp√©rature √©lev√©e", df[df["Alerte_Temp"].isin(["Orange", "Rouge"])]))
    if not df[df["Alerte_Vent"].isin(["Orange", "Rouge"])].empty:
        alertes.append(("üå¨Ô∏è Vent dangereux", df[df["Alerte_Vent"].isin(["Orange", "Rouge"])]))
    if not df[df["Alerte_Precip"].isin(["Orange", "Rouge"])].empty:
        alertes.append(("üåßÔ∏è Pr√©cipitations extr√™mes", df[df["Alerte_Precip"].isin(["Orange", "Rouge"])]))
    
    if not alertes:
        st.success("‚úÖ Aucun danger signal√© actuellement.")
    else:
        for titre, data in alertes:
            st.warning(titre)
            for _, row in data.iterrows():
                with st.expander(f"{row['R√©gion']} - Niveau {row[alert_col]}"):
                    st.write(f"- Pr√©cipitations: {row['Pr√©cipitations']} mm")
                    st.write(f"- Vent: {row['Vent']} km/h")
                    st.write(f"- Temp√©rature: {row['Temp√©rature']} ¬∞C")
                    st.write(f"- Impact: {row['Impacts']}")

    st.markdown("---")
    st.subheader("üîß Recommandations G√©n√©rales")

    st.markdown("### üåßÔ∏è En cas de pr√©cipitations extr√™mes")
    st.markdown("""
    - √âvitez de traverser des routes inond√©es, m√™me si elles paraissent praticables.
    - Sur√©levez les √©quipements sensibles dans les maisons susceptibles d‚Äô√™tre inond√©es.
    - Coupez l‚Äôalimentation √©lectrique dans les zones inond√©es pour √©viter les √©lectrocutions.
    - Suivez les bulletins m√©t√©o locaux et les alertes officielles en continu.
    """)
    
    st.markdown("### üå¨Ô∏è En cas de vent violent")
    st.markdown("""
    - √âvitez de vous abriter sous les arbres ou pr√®s de structures m√©talliques pendant les rafales.
    - Rentrez les objets ext√©rieurs pouvant √™tre emport√©s (panneaux, poubelles, outils).
    - Renforcez les structures l√©g√®res ou temporaires comme les abris de fortune.
    - Limitez vos d√©placements en voiture, surtout dans les zones bois√©es ou montagneuses.
    """)
    
    st.markdown("### üå°Ô∏è En cas de temp√©ratures √©lev√©es")
    st.markdown("""
    - Buvez de l‚Äôeau r√©guli√®rement, m√™me sans sensation de soif.
    - √âvitez les activit√©s physiques intenses entre 11h et 16h.
    - Portez des v√™tements l√©gers, de couleur claire et prot√©gez-vous du soleil.
    - V√©rifiez r√©guli√®rement l‚Äô√©tat de sant√© des enfants, personnes √¢g√©es ou malades.
    """)


st.markdown("---")
st.markdown("""
<div style='text-align: center;'>
    <em>Syst√®me d'Alerte Pr√©coce Climat-Risques - Minist√®re des Transports et de la Sant√©</em><br>
    <small>D√©mo d√©velopp√©e avec Streamlit | Donn√©es fictives</small>
</div>
""", unsafe_allow_html=True)
